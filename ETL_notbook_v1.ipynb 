{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of ETL_notbook.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/etumi/ETL-Project/blob/master/ETL_notbook.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "usGOp3HZDk2j",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Import Dependencies\n",
        "from pprint import pprint\n",
        "import pandas as pd\n",
        "\n",
        "import requests\n",
        "from sqlalchemy import create_engine\n",
        "import numpy as np\n",
        "from config import password, api_key\n",
        "pd.set_option('display.max_columns', None)\n",
        "\n",
        "import re"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "frxFwel-Nere",
        "colab_type": "text"
      },
      "source": [
        "## Extract"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X4ZKRtnaDv0s",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#import academy awards database\n",
        "AA_url = 'https://raw.githubusercontent.com/etumi/ETL-Project/master/Resources/AA_database.csv'\n",
        "AA_df = pd.read_csv(AA_url)\n",
        "\n",
        "#import imbd databases\n",
        "imdb_movies_url= \"https://raw.githubusercontent.com/etumi/ETL-Project/master/Resources/IMDb%20movies.csv\"\n",
        "imdb_movie_data = pd.read_csv(imdb_movies_url)\n",
        "#imdb_data = pd.read_csv(\"https://raw.githubusercontent.com/etumi/ETL-Project/master/Resources/IMDb%20ratings.csv\")\n",
        "\n",
        "#import Rotten tomatoes db\n",
        "rotten_tomatoes_url = \"https://raw.githubusercontent.com/etumi/ETL-Project/master/Resources/all_movie.csv\" #actually rotten tomatoes DB\n",
        "rotten_tomatoes = pd.read_csv(rotten_tomatoes_url)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2KmXbVMuOcGX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Extract information from OMDB API\n",
        "\n",
        "#Set base url\n",
        "base_url = f\"http://www.omdbapi.com/?apikey={api_key}&i=\"\n",
        "response = requests.get(base_url).json()\n",
        "\n",
        "#filter for movies between 2010 and 2015\n",
        "imdb_movie_data = imdb_movie_data.loc[(imdb_movie_data['year'] > 2009) & (imdb_movie_data['year'] < 2016)]\n",
        "\n",
        "imdb_movie_data.loc[imdb_movie_data['country' == 'USA']]\n",
        "\n",
        "imdb_title_id = imdb_movie_data[\"imdb_title_id\"]\n",
        "results = []\n",
        "\n",
        "for imdbID in imdb_title_id:\n",
        "    \n",
        "    base_url = f\"http://www.omdbapi.com/?apikey={api_key}&i={imdbID}\"\n",
        "    response = requests.get(base_url).json()\n",
        "    \n",
        "    if \"Error\" not in response.keys():\n",
        "        results.append(response)\n",
        "        print(f\"Movie found {imdbID}\")\n",
        "        print(\"-----------------------------------Completed-----------------------------------\")\n",
        "    \n",
        "    else: \n",
        "        print(f\"Movie ID not found {imdbID}\")\n",
        "        print(\"-------------------------------Movie Not Found---------------------------------\")\n",
        "\n",
        "omdb_db = pd.DataFrame(results)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FhU0wi7jOdQ3",
        "colab_type": "text"
      },
      "source": [
        "# Transform"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FQPf9qJmRf8B",
        "colab_type": "text"
      },
      "source": [
        "### Clean up Academy Awards Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IBCEhfNCKPNv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "AA_df[['Year1','Year2']] = AA_df.Year.str.split(\"/\",expand=True,)\n",
        "AA_df['Year1'] = pd.to_numeric(AA_df['Year1'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AHfPHPoPLyMt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#filter original dataset to have 15 years of data from 2010 to 2015\n",
        "AA_filtered_df = AA_df.loc[AA_df['Year1'] > 2009]\n",
        "AA_filtered_df = AA_filtered_df.drop(['Year1', 'Year2'], axis = 1)\n",
        "\n",
        "#convert Year column to number\n",
        "AA_filtered_df['Year'] = pd.to_numeric(AA_filtered_df['Year'])\n",
        "\n",
        "#change values for  winner and nominies\n",
        "AA_filtered_df = AA_filtered_df.fillna(value={'Winner':0})\n",
        "AA_filtered_df = AA_filtered_df.replace({'Winner': {0: 'Nominated', 1: 'Won'}})"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SYKZ8Fa1Nod1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "Movie_Awards = ['Best Picture', 'Short Film (Animated)', 'Short Film (Live Action)']\n",
        "\n",
        "AA_filtered_df = AA_filtered_df[AA_filtered_df['Award'].isin(Movie_Awards)]\n",
        "AA_filtered_df = AA_filtered_df.drop(['Film'], axis = 1)\n",
        "AA_filtered_df = AA_filtered_df.rename(columns= {'Name' : 'Title', 'Winner': 'Outcome'})\n",
        "\n",
        "#make all column names lower case\n",
        "columns = AA_filtered_df.columns.str.lower()\n",
        "AA_filtered_df.columns = columns\n",
        "\n",
        "#remove special characters and spaces from title name as well as make lower case\n",
        "AA_filtered_df['query_title'] = AA_filtered_df['title'].map(lambda x: re.sub(r'\\W+', '', x))\n",
        "\n",
        "AA_filtered_df['query_title'] = AA_filtered_df['query_title'].str.strip().str.lower()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-nCGKxZgydrb",
        "colab_type": "text"
      },
      "source": [
        "### Clean up OMDB API data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1v6q4mxgTEx6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Split up Ratings information in ratings columns\n",
        "omdb_db[\"rotten_rating\"] = omdb_db.Ratings.apply(pd.Series)[1].apply(pd.Series)[\"Value\"]\n",
        "\n",
        "#Select needed columns\n",
        "new_omdb = new_omdb.rename(columns = {'imdbID': 'imdb_ID', 'imdbRating': 'imdb_rating'})\n",
        "new_omdb = omdb_db[['imdb_ID','rotten_rating','imdb_rating']].set_index('imdb_ID')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a_qdMZE5YPRB",
        "colab_type": "text"
      },
      "source": [
        "### Clean up IMDB Movies database"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H6X9QZ0OYS5A",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Filter IMDB for 2010 to 2015\n",
        "imdb_movie_data = imdb_movie_data.loc[(imdb_movie_data['year'] > 2009) & (imdb_movie_data['year'] < 2016)]\n",
        "#Filter for USA movies only\n",
        "imdb_movie_data = imdb_movie_data.loc[imdb_movie_data['country'] == 'USA']\n",
        "\n",
        "\n",
        "imdb_movie_data2 = imdb_movie_data[['imdb_title_id','title','year','genre', 'votes', 'duration', 'country', 'language', 'description']]\n",
        "imdb_movie_data2 = imdb_movie_data2.rename(columns= {'imdb_title_id' : 'imdb_ID'})\n",
        "\n",
        "#remove special characters and spaces from title name as well as make lower case\n",
        "imdb_movie_data2['query_title'] = imdb_movie_data2['title'].map(lambda x: re.sub(r'\\W+', '', x))\n",
        "imdb_movie_data2['query_title'] = imdb_movie_data2['query_title'].str.strip().str.lower()\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QX_ONB7oTtSQ",
        "colab_type": "text"
      },
      "source": [
        "### Clean up Rotten Tomatoes dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yooznt-jHRTK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#filter rotten tomatoes dataset for 2010-2015\n",
        "rotten_tomatoes = rotten_tomatoes.loc[(rotten_tomatoes['Year'] > 2009) & (rotten_tomatoes['Year'] < 2016)]\n",
        "\n",
        "rotten_tomatoes_1 = rotten_tomatoes[['Title', 'Cast 1', 'Cast 2', 'Rating', 'Director 1', 'Release Date', 'Studio']]\n",
        "\n",
        "columns = rotten_tomatoes_1.columns.str.lower()\n",
        "columns = [name.replace(' ', '_') for name in columns]\n",
        "rotten_tomatoes_1.columns = columns\n",
        "\n",
        "rotten_tomatoes_1 = rotten_tomatoes_1.rename(columns ={'cast_1': 'actor_1', 'cast_2': 'actor_2', 'rating':'pg_rating', 'director_1': 'director'})\n",
        "\n",
        "#remove special characters and spaces from title name as well as make lower case\n",
        "rotten_tomatoes_1['query_title'] = rotten_tomatoes_1['title'].map(lambda x: re.sub(r'\\W+', '', x))\n",
        "rotten_tomatoes_1['query_title'] = rotten_tomatoes_1['query_title'].str.strip().str.lower()\n",
        "\n",
        "\n",
        "#drop duplicate rows\n",
        "rotten_tomatoes_1 = rotten_tomatoes_1.drop_duplicates('query_title', keep='last')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FmpzLhl1Og2Q",
        "colab_type": "text"
      },
      "source": [
        "# Load"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OmWNR0ieDjbI",
        "colab_type": "text"
      },
      "source": [
        "### Create connection to database"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TQRE2iK7Dmbf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "engine = create_engine(f'postgresql://{username}:{password}@mypostgresdb.cft8wszdkeh0.us-east-2.rds.amazonaws.com:5432/postgres')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FybfEchfDoTd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Upload all tables\n",
        "\n",
        "AA_filtered_df.to_sql(name=\"Academy_Awards\",con=engine, if_exists='append', index=False) #Academy Awards dataset\n",
        "new_omdb.to_sql(name=\"OMDB\",con=engine, if_exists='append', index=True) #OMDB API data\n",
        "imdb_movie_data2.to_sql(name=\"IMDB\",con=engine, if_exists='append', index=False) #IMDB Movies dataset\n",
        "rotten_tomatoes_1.to_sql(name=\"Rotten_Tomatoes\",con=engine, if_exists='append', index=False) #Rotten Tomatoes dataset"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}